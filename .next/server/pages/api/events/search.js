"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/events/search";
exports.ids = ["pages/api/events/search"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("dotenv");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "puppeteer":
/*!****************************!*\
  !*** external "puppeteer" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("puppeteer");

/***/ }),

/***/ "puppeteer-extra":
/*!**********************************!*\
  !*** external "puppeteer-extra" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("puppeteer-extra");

/***/ }),

/***/ "puppeteer-extra-plugin-stealth":
/*!*************************************************!*\
  !*** external "puppeteer-extra-plugin-stealth" ***!
  \*************************************************/
/***/ ((module) => {

module.exports = require("puppeteer-extra-plugin-stealth");

/***/ }),

/***/ "(api)/__barrel_optimize__?names=isSameDay,parse!=!./node_modules/date-fns/index.js":
/*!************************************************************************************!*\
  !*** __barrel_optimize__?names=isSameDay,parse!=!./node_modules/date-fns/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSameDay: () => (/* reexport safe */ C_Users_cityz_IllI_play_tooket_node_modules_date_fns_isSameDay_js__WEBPACK_IMPORTED_MODULE_0__.isSameDay),\n/* harmony export */   parse: () => (/* reexport safe */ C_Users_cityz_IllI_play_tooket_node_modules_date_fns_parse_js__WEBPACK_IMPORTED_MODULE_1__.parse)\n/* harmony export */ });\n/* harmony import */ var C_Users_cityz_IllI_play_tooket_node_modules_date_fns_isSameDay_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/date-fns/isSameDay.js */ \"(api)/./node_modules/date-fns/isSameDay.js\");\n/* harmony import */ var C_Users_cityz_IllI_play_tooket_node_modules_date_fns_parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/date-fns/parse.js */ \"(api)/./node_modules/date-fns/parse.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvX19iYXJyZWxfb3B0aW1pemVfXz9uYW1lcz1pc1NhbWVEYXkscGFyc2UhPSEuL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNzRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RpY2tldC1zZWFyY2hlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9pbmRleC5qcz8zYTgzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IHsgaXNTYW1lRGF5IH0gZnJvbSBcIkM6XFxcXFVzZXJzXFxcXGNpdHl6XFxcXElsbElcXFxccGxheVxcXFx0b29rZXRcXFxcbm9kZV9tb2R1bGVzXFxcXGRhdGUtZm5zXFxcXGlzU2FtZURheS5qc1wiXG5leHBvcnQgeyBwYXJzZSB9IGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxjaXR5elxcXFxJbGxJXFxcXHBsYXlcXFxcdG9va2V0XFxcXG5vZGVfbW9kdWxlc1xcXFxkYXRlLWZuc1xcXFxwYXJzZS5qc1wiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/__barrel_optimize__?names=isSameDay,parse!=!./node_modules/date-fns/index.js\n");

/***/ }),

/***/ "(api)/__barrel_optimize__?names=parse!=!./node_modules/date-fns/index.js":
/*!**************************************************************************!*\
  !*** __barrel_optimize__?names=parse!=!./node_modules/date-fns/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parse: () => (/* reexport safe */ C_Users_cityz_IllI_play_tooket_node_modules_date_fns_parse_js__WEBPACK_IMPORTED_MODULE_0__.parse)
/* harmony export */ });
/* harmony import */ var C_Users_cityz_IllI_play_tooket_node_modules_date_fns_parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/date-fns/parse.js */ "(api)/./node_modules/date-fns/parse.js");



/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents%2Fsearch&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5Csearch.ts&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents%2Fsearch&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5Csearch.ts&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_events_search_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\events\\search.ts */ \"(api)/./pages/api/events/search.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_events_search_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_events_search_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/events/search\",\n        pathname: \"/api/events/search\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_events_search_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmV2ZW50cyUyRnNlYXJjaCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDZXZlbnRzJTVDc2VhcmNoLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzREO0FBQzVEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx3REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsd0RBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlja2V0LXNlYXJjaGVyLz8zYmI1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxcZXZlbnRzXFxcXHNlYXJjaC50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCBcImRlZmF1bHRcIik7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCBcImNvbmZpZ1wiKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2V2ZW50cy9zZWFyY2hcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9ldmVudHMvc2VhcmNoXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents%2Fsearch&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5Csearch.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/services/search-service.ts":
/*!****************************************!*\
  !*** ./lib/services/search-service.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchService: () => (/* binding */ SearchService),\n/* harmony export */   searchService: () => (/* binding */ searchService)\n/* harmony export */ });\n/* harmony import */ var _src_stub_hub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../src/stub-hub */ \"(api)/./src/stub-hub.js\");\n/* harmony import */ var _src_vivid_seats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/vivid-seats */ \"(api)/./src/vivid-seats.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _src_config_env__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../src/config/env */ \"(api)/./src/config/env.ts\");\n/* harmony import */ var _src_event_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../src/event-utils */ \"(api)/./src/event-utils.js\");\n/* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/logger */ \"(api)/./lib/utils/logger.ts\");\n/* harmony import */ var _barrel_optimize_names_parse_date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=parse!=!date-fns */ \"(api)/__barrel_optimize__?names=parse!=!./node_modules/date-fns/index.js\");\n\n\n\n\n\n\n\nclass SearchService {\n    constructor(){\n        this.supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__.createClient)(_src_config_env__WEBPACK_IMPORTED_MODULE_3__.config.supabase.url, _src_config_env__WEBPACK_IMPORTED_MODULE_3__.config.supabase.serviceKey);\n        this.stubHubSearcher = new _src_stub_hub__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this.vividSeatsSearcher = new _src_vivid_seats__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    }\n    async searchAll(params) {\n        try {\n            // Add a timestamp to track when the search started\n            const searchStartTime = new Date();\n            // Get existing events and tickets from database first\n            const { data: existingEvents } = await this.supabase.from(\"events\").select(`\r\n          *,\r\n          event_links (*),\r\n          tickets (*)\r\n        `).ilike(\"name\", `%${params.keyword || params.artist}%`).gte(\"date\", new Date().toISOString());\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(\"Found existing events:\", existingEvents?.length || 0);\n            // Start searches in parallel with timeouts\n            const searches = [];\n            const sources = {};\n            if (params.source === \"all\" || params.source === \"stubhub\") {\n                searches.push(this.searchStubHub(params).then((results)=>{\n                    sources.stubhub = {\n                        isLive: true,\n                        lastUpdated: searchStartTime.toISOString()\n                    };\n                    return results;\n                }).catch((error)=>{\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"StubHub search error:\", error);\n                    sources.stubhub = {\n                        isLive: false,\n                        lastUpdated: existingEvents?.find((e)=>e.event_links.some((l)=>l.source === \"stubhub\"))?.updated_at || searchStartTime.toISOString(),\n                        error: error.message\n                    };\n                    return [];\n                }));\n            }\n            if (params.source === \"all\" || params.source === \"vividseats\") {\n                searches.push(this.searchVividSeats(params).then((results)=>{\n                    sources.vividseats = {\n                        isLive: true,\n                        lastUpdated: searchStartTime.toISOString()\n                    };\n                    return results;\n                }).catch((error)=>{\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"VividSeats search error:\", error);\n                    sources.vividseats = {\n                        isLive: false,\n                        lastUpdated: existingEvents?.find((e)=>e.event_links.some((l)=>l.source === \"vividseats\"))?.updated_at || searchStartTime.toISOString(),\n                        error: error.message\n                    };\n                    return [];\n                }));\n            }\n            // Wait for all searches with a timeout\n            const results = await Promise.race([\n                Promise.all(searches),\n                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Search timeout\")), 60000))\n            ]);\n            // Combine and deduplicate results\n            const allEvents = [\n                ...existingEvents || [],\n                ...results.flat()\n            ];\n            const eventMap = new Map();\n            allEvents.forEach((event)=>{\n                const key = `${event.name}-${event.date}-${event.venue}`;\n                if (!eventMap.has(key) || event.tickets?.length > (eventMap.get(key)?.tickets?.length || 0)) {\n                    eventMap.set(key, event);\n                }\n            });\n            const combinedResults = Array.from(eventMap.values());\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(\"Search completed\", {\n                totalResults: combinedResults.length,\n                sources: Object.keys(sources)\n            });\n            return {\n                success: true,\n                data: combinedResults,\n                metadata: {\n                    total: combinedResults.length,\n                    sources\n                }\n            };\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Search error:\", error);\n            return {\n                success: false,\n                error: \"Failed to perform search\",\n                metadata: {\n                    error: error instanceof Error ? error.message : \"Unknown error\"\n                }\n            };\n        }\n    }\n    async storeEvent(event) {\n        try {\n            // Check for existing event\n            const matchingEvent = await (0,_src_event_utils__WEBPACK_IMPORTED_MODULE_4__.findMatchingEvent)(this.supabase, {\n                name: event.name || event.title,\n                date: event.date,\n                venue: event.venue\n            }, event.source);\n            if (matchingEvent) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Found matching event: ${matchingEvent.name}`);\n                // Add source-specific link if it doesn't exist\n                if (!matchingEvent.hasSourceLink) {\n                    const { error: linkError } = await this.supabase.from(\"event_links\").insert({\n                        event_id: matchingEvent.id,\n                        source: event.source,\n                        url: event.link\n                    });\n                    if (linkError) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting event link:\", linkError);\n                    }\n                }\n                // Insert new tickets\n                if (event.tickets?.sections) {\n                    const tickets = this.transformTickets(matchingEvent.id, event);\n                    const { error: ticketError } = await this.supabase.from(\"tickets\").insert(tickets);\n                    if (ticketError) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting tickets:\", ticketError);\n                    }\n                }\n                // Return updated event data\n                const { data: updatedEvent } = await this.supabase.from(\"events\").select(`\r\n            *,\r\n            event_links (*),\r\n            tickets (*)\r\n          `).eq(\"id\", matchingEvent.id).single();\n                return updatedEvent;\n            }\n            // Insert new event\n            const { data: newEvent, error: eventError } = await this.supabase.from(\"events\").insert({\n                name: event.name || event.title,\n                type: event.type || \"Concert\",\n                category: event.category || \"Concert\",\n                date: new Date(event.date).toISOString(),\n                venue: event.venue\n            }).select().single();\n            if (eventError || !newEvent) {\n                _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting event:\", eventError);\n                return null;\n            }\n            // Insert event link\n            await this.supabase.from(\"event_links\").insert({\n                event_id: newEvent.id,\n                source: event.source,\n                url: event.link\n            });\n            // Insert tickets\n            if (event.tickets?.sections) {\n                const tickets = this.transformTickets(newEvent.id, event);\n                await this.supabase.from(\"tickets\").insert(tickets);\n            }\n            // Return complete event data\n            const { data: completeEvent } = await this.supabase.from(\"events\").select(`\r\n          *,\r\n          event_links (*),\r\n          tickets (*)\r\n        `).eq(\"id\", newEvent.id).single();\n            return completeEvent;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error storing event:\", error);\n            return null;\n        }\n    }\n    transformTickets(eventId, event) {\n        return event.tickets.sections.flatMap((section)=>section.tickets.map((ticket)=>({\n                    event_id: eventId,\n                    price: ticket.rawPrice,\n                    section: section.section,\n                    row: ticket.row,\n                    quantity: parseInt(ticket.quantity) || 1,\n                    source: event.source,\n                    url: ticket.listingUrl || ticket.url,\n                    listing_id: ticket.listingId,\n                    raw_data: ticket\n                })));\n    }\n    async searchStubHub(params) {\n        try {\n            const rawEvents = await this.stubHubSearcher.searchConcerts(params.artist || params.keyword || \"\", params.venue || \"\", params.location || \"\");\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Found ${rawEvents.length} StubHub events`);\n            // Process each event sequentially to avoid race conditions\n            const storedEvents = [];\n            for (const event of rawEvents){\n                try {\n                    // Parse the date string properly\n                    const dateRegex = /([A-Za-z]+)\\s+(\\d+)\\s+(\\d{4}).*?(\\d+:\\d+\\s*[AP]M)/i;\n                    const match = event.date.match(dateRegex);\n                    if (!match) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Failed to parse StubHub date:\", event.date);\n                        continue;\n                    }\n                    const [_, month, day, year, time] = match;\n                    const standardDateStr = `${month} ${day} ${year} ${time}`;\n                    const parsedDate = (0,_barrel_optimize_names_parse_date_fns__WEBPACK_IMPORTED_MODULE_6__.parse)(standardDateStr, \"MMM d yyyy h:mm a\", new Date());\n                    if (isNaN(parsedDate.getTime())) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Invalid date after parsing:\", standardDateStr);\n                        continue;\n                    }\n                    // Check for existing event\n                    const matchingEvent = await (0,_src_event_utils__WEBPACK_IMPORTED_MODULE_4__.findMatchingEvent)(this.supabase, {\n                        name: event.name,\n                        date: parsedDate.toISOString(),\n                        venue: event.venue\n                    }, \"stubhub\");\n                    if (matchingEvent) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Found matching event for StubHub: ${matchingEvent.name}`);\n                        // Add StubHub link if it doesn't exist\n                        if (!matchingEvent.hasSourceLink) {\n                            const { error: linkError } = await this.supabase.from(\"event_links\").insert({\n                                event_id: matchingEvent.id,\n                                source: \"stubhub\",\n                                url: event.link\n                            });\n                            if (linkError) {\n                                _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting StubHub link:\", linkError);\n                            } else {\n                                _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(\"Added StubHub link to existing event\");\n                            }\n                        }\n                        // Insert or update tickets\n                        if (event.tickets?.sections) {\n                            const tickets = this.transformTickets(matchingEvent.id, {\n                                ...event,\n                                source: \"stubhub\"\n                            });\n                            if (tickets.length > 0) {\n                                const { error: ticketError } = await this.supabase.from(\"tickets\").insert(tickets);\n                                if (ticketError) {\n                                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting StubHub tickets:\", ticketError);\n                                } else {\n                                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Inserted ${tickets.length} StubHub tickets`);\n                                }\n                            }\n                        }\n                        // Get updated event data\n                        const { data: updatedEvent } = await this.supabase.from(\"events\").select(`\r\n                *,\r\n                event_links (*),\r\n                tickets (*)\r\n              `).eq(\"id\", matchingEvent.id).single();\n                        if (updatedEvent) {\n                            storedEvents.push(updatedEvent);\n                        }\n                    } else {\n                        // Insert new event\n                        const { data: newEvent, error: eventError } = await this.supabase.from(\"events\").insert({\n                            name: event.name,\n                            type: \"Concert\",\n                            category: event.category || \"Concert\",\n                            date: parsedDate.toISOString(),\n                            venue: event.venue\n                        }).select().single();\n                        if (eventError) {\n                            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting new StubHub event:\", eventError);\n                            continue;\n                        }\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Created new event: ${newEvent.name}`);\n                        // Insert StubHub link\n                        const { error: linkError } = await this.supabase.from(\"event_links\").insert({\n                            event_id: newEvent.id,\n                            source: \"stubhub\",\n                            url: event.link\n                        });\n                        if (linkError) {\n                            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting new StubHub link:\", linkError);\n                        }\n                        // Insert tickets\n                        if (event.tickets?.sections) {\n                            const tickets = this.transformTickets(newEvent.id, {\n                                ...event,\n                                source: \"stubhub\"\n                            });\n                            if (tickets.length > 0) {\n                                const { error: ticketError } = await this.supabase.from(\"tickets\").insert(tickets);\n                                if (ticketError) {\n                                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting new StubHub tickets:\", ticketError);\n                                } else {\n                                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Inserted ${tickets.length} new StubHub tickets`);\n                                }\n                            }\n                        }\n                        // Get complete event data\n                        const { data: completeEvent } = await this.supabase.from(\"events\").select(`\r\n                *,\r\n                event_links (*),\r\n                tickets (*)\r\n              `).eq(\"id\", newEvent.id).single();\n                        if (completeEvent) {\n                            storedEvents.push(completeEvent);\n                        }\n                    }\n                } catch (error) {\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error processing StubHub event:\", error);\n                }\n            }\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Successfully stored ${storedEvents.length} StubHub events`);\n            return storedEvents;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"StubHub search error:\", error);\n            return [];\n        }\n    }\n    async searchVividSeats(params) {\n        let browser = null;\n        try {\n            const rawEvents = await this.vividSeatsSearcher.searchConcerts(params.artist || params.keyword || \"\", params.venue || \"\", params.location || \"\");\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Found ${rawEvents.length} VividSeats events`);\n            // Process each event sequentially to avoid race conditions\n            const storedEvents = [];\n            for (const event of rawEvents){\n                try {\n                    // Parse VividSeats date format\n                    const dateRegex = /([A-Za-z]+)\\s+(\\d+)\\s+[A-Za-z]+\\s+(\\d+:\\d+[ap]m)/i;\n                    const match = event.date.match(dateRegex);\n                    if (!match) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Failed to parse VividSeats date:\", event.date);\n                        continue;\n                    }\n                    const [_, month, day, time] = match;\n                    const year = \"2025\"; // Default to 2025 for future dates\n                    const standardDateStr = `${month} ${day} ${year} ${time}`;\n                    const parsedDate = (0,_barrel_optimize_names_parse_date_fns__WEBPACK_IMPORTED_MODULE_6__.parse)(standardDateStr, \"MMM d yyyy h:mma\", new Date());\n                    if (isNaN(parsedDate.getTime())) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Invalid date after parsing:\", standardDateStr);\n                        continue;\n                    }\n                    // Check for existing event\n                    const matchingEvent = await (0,_src_event_utils__WEBPACK_IMPORTED_MODULE_4__.findMatchingEvent)(this.supabase, {\n                        name: event.title,\n                        date: parsedDate.toISOString(),\n                        venue: event.venue\n                    }, \"vividseats\");\n                    if (matchingEvent) {\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Found matching event for VividSeats: ${matchingEvent.name}`);\n                        // Add VividSeats link if it doesn't exist\n                        if (!matchingEvent.hasSourceLink) {\n                            const { error: linkError } = await this.supabase.from(\"event_links\").insert({\n                                event_id: matchingEvent.id,\n                                source: \"vividseats\",\n                                url: event.link\n                            });\n                            if (linkError) {\n                                _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting VividSeats link:\", linkError);\n                            } else {\n                                _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(\"Added VividSeats link to existing event\");\n                            }\n                        }\n                        // Insert or update tickets\n                        if (event.tickets?.sections) {\n                            const tickets = this.transformTickets(matchingEvent.id, {\n                                ...event,\n                                source: \"vividseats\"\n                            });\n                            if (tickets.length > 0) {\n                                const { error: ticketError } = await this.supabase.from(\"tickets\").insert(tickets);\n                                if (ticketError) {\n                                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting VividSeats tickets:\", ticketError);\n                                } else {\n                                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Inserted ${tickets.length} VividSeats tickets`);\n                                }\n                            }\n                        }\n                        // Get updated event data\n                        const { data: updatedEvent } = await this.supabase.from(\"events\").select(`\r\n                *,\r\n                event_links (*),\r\n                tickets (*)\r\n              `).eq(\"id\", matchingEvent.id).single();\n                        if (updatedEvent) {\n                            storedEvents.push(updatedEvent);\n                        }\n                    } else {\n                        // Insert new event\n                        const { data: newEvent, error: eventError } = await this.supabase.from(\"events\").insert({\n                            name: event.title,\n                            type: \"Concert\",\n                            category: \"Concert\",\n                            date: parsedDate.toISOString(),\n                            venue: event.venue\n                        }).select().single();\n                        if (eventError) {\n                            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting new VividSeats event:\", eventError);\n                            continue;\n                        }\n                        _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Created new event: ${newEvent.name}`);\n                        // Insert VividSeats link\n                        const { error: linkError } = await this.supabase.from(\"event_links\").insert({\n                            event_id: newEvent.id,\n                            source: \"vividseats\",\n                            url: event.link\n                        });\n                        if (linkError) {\n                            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting new VividSeats link:\", linkError);\n                        }\n                        // Insert tickets\n                        if (event.tickets?.sections) {\n                            const tickets = this.transformTickets(newEvent.id, {\n                                ...event,\n                                source: \"vividseats\"\n                            });\n                            if (tickets.length > 0) {\n                                const { error: ticketError } = await this.supabase.from(\"tickets\").insert(tickets);\n                                if (ticketError) {\n                                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error inserting new VividSeats tickets:\", ticketError);\n                                } else {\n                                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Inserted ${tickets.length} new VividSeats tickets`);\n                                }\n                            }\n                        }\n                        // Get complete event data\n                        const { data: completeEvent } = await this.supabase.from(\"events\").select(`\r\n                *,\r\n                event_links (*),\r\n                tickets (*)\r\n              `).eq(\"id\", newEvent.id).single();\n                        if (completeEvent) {\n                            storedEvents.push(completeEvent);\n                        }\n                    }\n                } catch (error) {\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error processing VividSeats event:\", error);\n                }\n            }\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.info(`Successfully stored ${storedEvents.length} VividSeats events`);\n            return storedEvents;\n        } catch (error) {\n            _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"VividSeats search error:\", error);\n            return [];\n        } finally{\n            if (browser) {\n                try {\n                    await browser.close();\n                } catch (error) {\n                    _utils_logger__WEBPACK_IMPORTED_MODULE_5__.logger.error(\"Error closing browser:\", error);\n                }\n            }\n        }\n    }\n}\nconst searchService = new SearchService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/services/search-service.ts\n");

/***/ }),

/***/ "(api)/./lib/utils/logger.ts":
/*!*****************************!*\
  !*** ./lib/utils/logger.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\nconst logger = {\n    info: (message, data)=>{\n        console.log(`[INFO] ${message}`, data || \"\");\n    },\n    error: (message, error)=>{\n        console.error(`[ERROR] ${message}`, error || \"\");\n    },\n    debug: (message, data)=>{\n        if (true) {\n            console.log(`[DEBUG] ${message}`, data || \"\");\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvdXRpbHMvbG9nZ2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxTQUFTO0lBQ3BCQyxNQUFNLENBQUNDLFNBQWlCQztRQUN0QkMsUUFBUUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFSCxRQUFRLENBQUMsRUFBRUMsUUFBUTtJQUMzQztJQUNBRyxPQUFPLENBQUNKLFNBQWlCSTtRQUN2QkYsUUFBUUUsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFSixRQUFRLENBQUMsRUFBRUksU0FBUztJQUMvQztJQUNBQyxPQUFPLENBQUNMLFNBQWlCQztRQUN2QixJQUFJSyxJQUF5QixFQUFlO1lBQzFDSixRQUFRQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUVILFFBQVEsQ0FBQyxFQUFFQyxRQUFRO1FBQzVDO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlja2V0LXNlYXJjaGVyLy4vbGliL3V0aWxzL2xvZ2dlci50cz83NTY1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBsb2dnZXIgPSB7XHJcbiAgaW5mbzogKG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IGFueSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coYFtJTkZPXSAke21lc3NhZ2V9YCwgZGF0YSB8fCAnJyk7XHJcbiAgfSxcclxuICBlcnJvcjogKG1lc3NhZ2U6IHN0cmluZywgZXJyb3I/OiBhbnkpID0+IHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYFtFUlJPUl0gJHttZXNzYWdlfWAsIGVycm9yIHx8ICcnKTtcclxuICB9LFxyXG4gIGRlYnVnOiAobWVzc2FnZTogc3RyaW5nLCBkYXRhPzogYW55KSA9PiB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgICAgY29uc29sZS5sb2coYFtERUJVR10gJHttZXNzYWdlfWAsIGRhdGEgfHwgJycpO1xyXG4gICAgfVxyXG4gIH1cclxufTsgIl0sIm5hbWVzIjpbImxvZ2dlciIsImluZm8iLCJtZXNzYWdlIiwiZGF0YSIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImRlYnVnIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/utils/logger.ts\n");

/***/ }),

/***/ "(api)/./pages/api/events/search.ts":
/*!************************************!*\
  !*** ./pages/api/events/search.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_services_search_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/services/search-service */ \"(api)/./lib/services/search-service.ts\");\n/* harmony import */ var _lib_utils_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/utils/logger */ \"(api)/./lib/utils/logger.ts\");\n\n\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            success: false,\n            error: \"Method not allowed\",\n            metadata: {}\n        });\n    }\n    try {\n        const params = req.body;\n        _lib_utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.info(\"Search request received\", params);\n        const result = await _lib_services_search_service__WEBPACK_IMPORTED_MODULE_0__.searchService.searchAll({\n            ...params,\n            source: \"all\"\n        });\n        if (!result.success) {\n            _lib_utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"Search failed:\", result.error);\n            return res.status(500).json(result);\n        }\n        return res.status(200).json(result);\n    } catch (error) {\n        _lib_utils_logger__WEBPACK_IMPORTED_MODULE_1__.logger.error(\"API error:\", error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Internal server error\",\n            metadata: {\n                error: error instanceof Error ? error.stack : \"Unknown error\"\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZXZlbnRzL3NlYXJjaC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFDOEQ7QUFFbEI7QUFFN0IsZUFBZUUsUUFDNUJDLEdBQW1CLEVBQ25CQyxHQUFrQztJQUVsQyxJQUFJRCxJQUFJRSxNQUFNLEtBQUssUUFBUTtRQUN6QixPQUFPRCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQzFCQyxTQUFTO1lBQ1RDLE9BQU87WUFDUEMsVUFBVSxDQUFDO1FBQ2I7SUFDRjtJQUVBLElBQUk7UUFDRixNQUFNQyxTQUFTUixJQUFJUyxJQUFJO1FBQ3ZCWCxxREFBTUEsQ0FBQ1ksSUFBSSxDQUFDLDJCQUEyQkY7UUFFdkMsTUFBTUcsU0FBUyxNQUFNZCx1RUFBYUEsQ0FBQ2UsU0FBUyxDQUFDO1lBQzNDLEdBQUdKLE1BQU07WUFDVEssUUFBUTtRQUNWO1FBRUEsSUFBSSxDQUFDRixPQUFPTixPQUFPLEVBQUU7WUFDbkJQLHFEQUFNQSxDQUFDUSxLQUFLLENBQUMsa0JBQWtCSyxPQUFPTCxLQUFLO1lBQzNDLE9BQU9MLElBQUlFLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUNPO1FBQzlCO1FBRUEsT0FBT1YsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQ087SUFDOUIsRUFBRSxPQUFPTCxPQUFPO1FBQ2RSLHFEQUFNQSxDQUFDUSxLQUFLLENBQUMsY0FBY0E7UUFDM0IsT0FBT0wsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUMxQkMsU0FBUztZQUNUQyxPQUFPQSxpQkFBaUJRLFFBQVFSLE1BQU1TLE9BQU8sR0FBRztZQUNoRFIsVUFBVTtnQkFDUkQsT0FBT0EsaUJBQWlCUSxRQUFRUixNQUFNVSxLQUFLLEdBQUc7WUFDaEQ7UUFDRjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWNrZXQtc2VhcmNoZXIvLi9wYWdlcy9hcGkvZXZlbnRzL3NlYXJjaC50cz9hZWJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tICduZXh0JztcclxuaW1wb3J0IHsgc2VhcmNoU2VydmljZSB9IGZyb20gJ0AvbGliL3NlcnZpY2VzL3NlYXJjaC1zZXJ2aWNlJztcclxuaW1wb3J0IHR5cGUgeyBTZWFyY2hQYXJhbXMsIFNlYXJjaFJlc3VsdCB9IGZyb20gJ0AvbGliL3R5cGVzL2FwaSc7XHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0AvbGliL3V0aWxzL2xvZ2dlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKFxyXG4gIHJlcTogTmV4dEFwaVJlcXVlc3QsXHJcbiAgcmVzOiBOZXh0QXBpUmVzcG9uc2U8U2VhcmNoUmVzdWx0PlxyXG4pIHtcclxuICBpZiAocmVxLm1ldGhvZCAhPT0gJ1BPU1QnKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgZXJyb3I6ICdNZXRob2Qgbm90IGFsbG93ZWQnLFxyXG4gICAgICBtZXRhZGF0YToge31cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IHJlcS5ib2R5IGFzIFNlYXJjaFBhcmFtcztcclxuICAgIGxvZ2dlci5pbmZvKCdTZWFyY2ggcmVxdWVzdCByZWNlaXZlZCcsIHBhcmFtcyk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VhcmNoU2VydmljZS5zZWFyY2hBbGwoe1xyXG4gICAgICAuLi5wYXJhbXMsXHJcbiAgICAgIHNvdXJjZTogJ2FsbCdcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghcmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKCdTZWFyY2ggZmFpbGVkOicsIHJlc3VsdC5lcnJvcik7XHJcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbihyZXN1bHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbihyZXN1bHQpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBsb2dnZXIuZXJyb3IoJ0FQSSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXHJcbiAgICAgIG1ldGFkYXRhOiB7XHJcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6ICdVbmtub3duIGVycm9yJ1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn0gIl0sIm5hbWVzIjpbInNlYXJjaFNlcnZpY2UiLCJsb2dnZXIiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsInN1Y2Nlc3MiLCJlcnJvciIsIm1ldGFkYXRhIiwicGFyYW1zIiwiYm9keSIsImluZm8iLCJyZXN1bHQiLCJzZWFyY2hBbGwiLCJzb3VyY2UiLCJFcnJvciIsIm1lc3NhZ2UiLCJzdGFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/events/search.ts\n");

/***/ }),

/***/ "(api)/./src/config/env.ts":
/*!***************************!*\
  !*** ./src/config/env.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config)\n/* harmony export */ });\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv */ \"dotenv\");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_0__);\n\n// Load environment variables\ndotenv__WEBPACK_IMPORTED_MODULE_0___default().config();\nconst config = {\n    supabase: {\n        url: \"https://rkctqjbksmszuhrocxxm.supabase.co\",\n        serviceKey: process.env.SUPABASE_SERVICE_KEY,\n        anonKey: process.env.SUPABASE_KEY\n    },\n    environment: \"development\" || 0\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvY29uZmlnL2Vudi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7QUFFNUIsNkJBQTZCO0FBQzdCQSxvREFBYTtBQUVOLE1BQU1DLFNBQVM7SUFDcEJDLFVBQVU7UUFDUkMsS0FBS0MsMENBQW9DO1FBQ3pDRyxZQUFZSCxRQUFRQyxHQUFHLENBQUNHLG9CQUFvQjtRQUM1Q0MsU0FBU0wsUUFBUUMsR0FBRyxDQUFDSyxZQUFZO0lBQ25DO0lBQ0FDLGFBQWFQLGlCQUF3QjtBQUN2QyxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGlja2V0LXNlYXJjaGVyLy4vc3JjL2NvbmZpZy9lbnYudHM/NWFmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XHJcblxyXG4vLyBMb2FkIGVudmlyb25tZW50IHZhcmlhYmxlc1xyXG5kb3RlbnYuY29uZmlnKCk7XHJcblxyXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xyXG4gIHN1cGFiYXNlOiB7XHJcbiAgICB1cmw6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCEsXHJcbiAgICBzZXJ2aWNlS2V5OiBwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX0tFWSEsXHJcbiAgICBhbm9uS2V5OiBwcm9jZXNzLmVudi5TVVBBQkFTRV9LRVkhXHJcbiAgfSxcclxuICBlbnZpcm9ubWVudDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50J1xyXG59OyAiXSwibmFtZXMiOlsiZG90ZW52IiwiY29uZmlnIiwic3VwYWJhc2UiLCJ1cmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic2VydmljZUtleSIsIlNVUEFCQVNFX1NFUlZJQ0VfS0VZIiwiYW5vbktleSIsIlNVUEFCQVNFX0tFWSIsImVudmlyb25tZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./src/config/env.ts\n");

/***/ }),

/***/ "(api)/./src/event-utils.js":
/*!****************************!*\
  !*** ./src/event-utils.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findMatchingEvent: () => (/* binding */ findMatchingEvent),\n/* harmony export */   getBaseArtistName: () => (/* binding */ getBaseArtistName),\n/* harmony export */   getNameSimilarity: () => (/* binding */ getNameSimilarity),\n/* harmony export */   normalizeString: () => (/* binding */ normalizeString)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_isSameDay_parse_date_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=isSameDay,parse!=!date-fns */ \"(api)/__barrel_optimize__?names=isSameDay,parse!=!./node_modules/date-fns/index.js\");\n\n// Function to normalize strings for comparison\nfunction normalizeString(str) {\n    if (!str) return \"\";\n    return str.toLowerCase().replace(/[^a-z0-9]/g, \"\").replace(/\\s+/g, \"\");\n}\n// Function to get the base artist name (removing suffixes like \"(18+ Event)\")\nfunction getBaseArtistName(name) {\n    if (!name) return \"\";\n    return name.split(/[\\(\\[]/, 1)[0].trim();\n}\n// Function to score name similarity\nfunction getNameSimilarity(name1, name2) {\n    if (!name1 || !name2) return 0;\n    const norm1 = normalizeString(name1);\n    const norm2 = normalizeString(name2);\n    // Direct match\n    if (norm1 === norm2) return 1;\n    // One contains the other\n    if (norm1.includes(norm2) || norm2.includes(norm1)) return 0.8;\n    // Calculate character overlap\n    const chars1 = new Set(norm1);\n    const chars2 = new Set(norm2);\n    const intersection = new Set([\n        ...chars1\n    ].filter((x)=>chars2.has(x)));\n    return intersection.size / Math.max(chars1.size, chars2.size);\n}\n// Function to parse date from different formats\nfunction parseEventDate(dateStr) {\n    if (!dateStr) return null;\n    // Try VividSeats format first (e.g., \"Jan 17 Fri 7:00pm\")\n    const vividSeatsRegex = /([A-Za-z]+)\\s+(\\d+)\\s+[A-Za-z]+\\s+(\\d+:\\d+[ap]m)/i;\n    const vividMatch = dateStr.match(vividSeatsRegex);\n    if (vividMatch) {\n        const [_, month, day, time] = vividMatch;\n        const year = \"2025\"; // Default to 2025 for future dates\n        const standardDateStr = `${month} ${day} ${year} ${time}`;\n        return (0,_barrel_optimize_names_isSameDay_parse_date_fns__WEBPACK_IMPORTED_MODULE_0__.parse)(standardDateStr, \"MMM d yyyy h:mma\", new Date());\n    }\n    // Try StubHub format (e.g., \"Jan 17 2025 7:00 PM\")\n    const stubHubRegex = /([A-Za-z]+)\\s+(\\d+)\\s+(\\d{4}).*?(\\d+:\\d+\\s*[AP]M)/i;\n    const stubMatch = dateStr.match(stubHubRegex);\n    if (stubMatch) {\n        const [_, month, day, year, time] = stubMatch;\n        const standardDateStr = `${month} ${day} ${year} ${time}`;\n        return (0,_barrel_optimize_names_isSameDay_parse_date_fns__WEBPACK_IMPORTED_MODULE_0__.parse)(standardDateStr, \"MMM d yyyy h:mm a\", new Date());\n    }\n    // If no matches, try direct parsing\n    try {\n        return new Date(dateStr);\n    } catch (e) {\n        console.error(\"Failed to parse date:\", dateStr);\n        return null;\n    }\n}\n// Function to find matching event\nasync function findMatchingEvent(supabaseClient, eventDetails, source) {\n    console.log(\"Searching for matching event:\", {\n        name: eventDetails.name || eventDetails.title,\n        date: eventDetails.date,\n        venue: eventDetails.venue,\n        source\n    });\n    try {\n        // First, try to find exact matches\n        const { data: exactMatches, error: exactError } = await supabaseClient.from(\"events\").select(`\r\n        id,\r\n        name,\r\n        date,\r\n        venue,\r\n        event_links (\r\n          url,\r\n          source\r\n        )\r\n      `).ilike(\"name\", getBaseArtistName(eventDetails.name || eventDetails.title)).gte(\"date\", new Date().toISOString());\n        if (exactError) {\n            console.error(\"Error searching for exact matches:\", exactError);\n            return null;\n        }\n        // Parse the new event's date\n        const newEventDate = parseEventDate(eventDetails.date);\n        if (!newEventDate) {\n            console.error(\"Could not parse event date:\", eventDetails.date);\n            return null;\n        }\n        console.log(\"Parsed new event date:\", newEventDate);\n        // First, try to find an exact match (same artist, same day, similar venue)\n        const exactMatch = exactMatches?.find((existingEvent)=>{\n            const existingDate = new Date(existingEvent.date);\n            return (0,_barrel_optimize_names_isSameDay_parse_date_fns__WEBPACK_IMPORTED_MODULE_0__.isSameDay)(existingDate, newEventDate) && getNameSimilarity(existingEvent.venue, eventDetails.venue) > 0.6;\n        });\n        if (exactMatch) {\n            console.log(\"Found exact match:\", exactMatch.name);\n            return {\n                ...exactMatch,\n                hasSourceLink: exactMatch.event_links.some((link)=>link.source === source)\n            };\n        }\n        // If no exact match, look for similar events\n        const matches = exactMatches.map((existingEvent)=>{\n            const existingDate = new Date(existingEvent.date);\n            const nameSimilarity = getNameSimilarity(getBaseArtistName(existingEvent.name), getBaseArtistName(eventDetails.name || eventDetails.title));\n            const venueSimilarity = getNameSimilarity(existingEvent.venue, eventDetails.venue);\n            const dateMatch = (0,_barrel_optimize_names_isSameDay_parse_date_fns__WEBPACK_IMPORTED_MODULE_0__.isSameDay)(existingDate, newEventDate);\n            const dateDiffInDays = Math.abs(existingDate.getTime() - newEventDate.getTime()) / (1000 * 60 * 60 * 24);\n            // Scoring system:\n            // - Name similarity: 0-40 points\n            // - Venue similarity: 0-30 points\n            // - Date match: 30 points\n            // - Date proximity penalty: -2 points per day difference (up to -20)\n            const score = nameSimilarity * 0.4 + venueSimilarity * 0.3 + (dateMatch ? 0.3 : Math.max(-0.2, -0.02 * dateDiffInDays));\n            console.log(\"Match details:\", {\n                existingName: existingEvent.name,\n                newName: eventDetails.name || eventDetails.title,\n                nameSimilarity,\n                venueSimilarity,\n                dateMatch,\n                dateDiffInDays,\n                score\n            });\n            return {\n                event: existingEvent,\n                score,\n                hasSourceLink: existingEvent.event_links.some((link)=>link.source === source)\n            };\n        }).filter((match)=>match.score > 0.8) // Require a very high match score\n        .sort((a, b)=>b.score - a.score);\n        if (matches.length > 0) {\n            const bestMatch = matches[0];\n            console.log(`Found matching event: \"${bestMatch.event.name}\" (score: ${bestMatch.score.toFixed(2)})`);\n            // Choose the better name\n            const existingName = bestMatch.event.name;\n            const newName = eventDetails.name || eventDetails.title;\n            // Prefer names without parentheses or special characters\n            const shouldUpdateName = existingName.includes(\"(\") && !newName.includes(\"(\") || existingName.includes(\"[\") && !newName.includes(\"[\") || existingName.length > newName.length && newName.length > 3;\n            if (shouldUpdateName) {\n                console.log(`Updating event name from \"${existingName}\" to \"${newName}\"`);\n                await supabaseClient.from(\"events\").update({\n                    name: newName\n                }).eq(\"id\", bestMatch.event.id);\n                bestMatch.event.name = newName;\n            }\n            return {\n                ...bestMatch.event,\n                hasSourceLink: bestMatch.hasSourceLink\n            };\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error in findMatchingEvent:\", error);\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/event-utils.js\n");

/***/ }),

/***/ "(api)/./src/stub-hub.js":
/*!*************************!*\
  !*** ./src/stub-hub.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _src_config_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/src/config/env */ \"(api)/./src/config/env.ts\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(api)/./src/utils.js\");\n\n\n\n\nconst supabaseClient = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(_src_config_env__WEBPACK_IMPORTED_MODULE_1__.config.supabase.url, _src_config_env__WEBPACK_IMPORTED_MODULE_1__.config.supabase.serviceKey);\nclass StubHubSearcher {\n    constructor(){\n        this.baseUrl = \"https://www.stubhub.com/secure/search\";\n    }\n    generateSearchUrl(artist, venue, location) {\n        const searchParams = new URLSearchParams();\n        const searchTerms = [\n            artist,\n            venue,\n            location\n        ].filter(Boolean);\n        searchParams.append(\"q\", searchTerms.join(\" \"));\n        return `${this.baseUrl}?${searchParams.toString()}`;\n    }\n    async setupBrowser() {\n        return await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.setupBrowser)();\n    }\n    async setupPage(browser) {\n        return await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.setupPage)(browser);\n    }\n    async getTicketPrices(eventUrl, existingPage = null) {\n        let browser = null;\n        let page = existingPage;\n        try {\n            if (!existingPage) {\n                browser = await this.setupBrowser();\n                page = await this.setupPage(browser);\n                console.log(\"Navigating to event page:\", eventUrl);\n                // Initial navigation\n                await page.goto(eventUrl, {\n                    waitUntil: \"domcontentloaded\",\n                    timeout: 30000\n                });\n            }\n            // Function to check for listings container\n            const checkListingsContainer = async ()=>{\n                console.log(\"Checking for listings container...\");\n                const content = await page.content();\n                return content.includes(\"listings-container\");\n            };\n            // First check\n            let hasListings = await checkListingsContainer();\n            // If not found, try reloading\n            if (!hasListings) {\n                console.log(\"Listings container not found, reloading page...\");\n                try {\n                    await Promise.race([\n                        page.reload({\n                            waitUntil: \"domcontentloaded\"\n                        }),\n                        new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Reload timeout\")), 10000))\n                    ]);\n                    // Wait a moment for any dynamic content\n                    await page.waitForTimeout(2000);\n                    // Check again after reload\n                    hasListings = await checkListingsContainer();\n                    if (!hasListings) {\n                        console.log(\"Listings container still not found after reload, trying alternative approach...\");\n                        // Try navigating to the URL again\n                        await page.goto(eventUrl, {\n                            waitUntil: \"domcontentloaded\",\n                            timeout: 10000\n                        });\n                        await page.waitForTimeout(2000);\n                        hasListings = await checkListingsContainer();\n                    }\n                } catch (reloadError) {\n                    console.log(\"Reload failed, trying alternative approach...\", reloadError.message);\n                    // If reload times out, try navigating to the URL again\n                    await page.goto(eventUrl, {\n                        waitUntil: \"domcontentloaded\",\n                        timeout: 10000\n                    });\n                    await page.waitForTimeout(2000);\n                    hasListings = await checkListingsContainer();\n                }\n            }\n            // Wait for listings container with multiple selector attempts\n            let listingsFound = false;\n            const selectors = [\n                \"#listings-container\",\n                '[data-testid=\"listings-container\"]',\n                \".listing-container\",\n                '[data-testid=\"event-listings\"]'\n            ];\n            console.log(\"Waiting for listings container to be visible...\");\n            for (const selector of selectors){\n                try {\n                    await page.waitForSelector(selector, {\n                        timeout: 5000,\n                        visible: true\n                    });\n                    console.log(`Found listings container with selector: ${selector}`);\n                    listingsFound = true;\n                    break;\n                } catch (error) {\n                    console.log(`Selector ${selector} not found, trying next...`);\n                }\n            }\n            if (!listingsFound) {\n                console.error(\"Could not find listings container with any known selector\");\n                await page.screenshot({\n                    path: \"listings-error.png\",\n                    fullPage: true\n                });\n                throw new Error(\"Listings container not found after all attempts\");\n            }\n            // Wait for actual ticket listings to load with shorter timeout\n            await page.waitForFunction(()=>{\n                const listings = document.querySelectorAll(\"[data-listing-id]\");\n                return listings.length > 0;\n            }, {\n                timeout: 10000\n            });\n            // Additional delay to ensure all dynamic content is loaded\n            await page.waitForTimeout(1000);\n            const tickets = await page.evaluate(()=>{\n                const listings = Array.from(document.querySelectorAll(\"[data-listing-id]\"));\n                console.log(`Processing ${listings.length} listings`);\n                const ticketsBySection = {};\n                listings.forEach((listing, index)=>{\n                    try {\n                        // Skip sold tickets\n                        if (listing.getAttribute(\"data-is-sold\") === \"1\") return;\n                        // Get section name with multiple selector attempts\n                        const section = listing.querySelector(\".sc-hlalgf-6\")?.textContent?.trim() || listing.querySelector('[data-testid=\"section-name\"]')?.textContent?.trim() || listing.querySelector('[data-auto=\"listing-section\"]')?.textContent?.trim() || \"General Admission\";\n                        // Get price with multiple selector attempts\n                        const priceElement = listing.querySelector('[data-testid=\"listing-price\"]') || listing.querySelector(\".sc-hlalgf-1\") || listing.querySelector('[data-auto=\"listing-price\"]');\n                        const price = priceElement?.textContent?.trim();\n                        // Get quantity with multiple selector attempts\n                        const quantity = listing.querySelector(\".sc-hlalgf-14\")?.textContent?.trim() || listing.querySelector('[data-testid=\"quantity\"]')?.textContent?.trim() || listing.querySelector('[data-auto=\"listing-quantity\"]')?.textContent?.trim();\n                        if (!price) return;\n                        if (!ticketsBySection[section]) {\n                            ticketsBySection[section] = {\n                                section,\n                                tickets: [],\n                                lowestPrice: Infinity,\n                                highestPrice: -Infinity,\n                                numberOfListings: 0\n                            };\n                        }\n                        const numericPrice = parseFloat(price.replace(/[^0-9.]/g, \"\"));\n                        const ticketInfo = {\n                            quantity,\n                            price,\n                            rawPrice: numericPrice,\n                            listingUrl: window.location.href,\n                            listingId: listing.getAttribute(\"data-listing-id\")\n                        };\n                        ticketsBySection[section].tickets.push(ticketInfo);\n                        if (!isNaN(numericPrice)) {\n                            ticketsBySection[section].lowestPrice = Math.min(ticketsBySection[section].lowestPrice, numericPrice);\n                            ticketsBySection[section].highestPrice = Math.max(ticketsBySection[section].highestPrice, numericPrice);\n                            ticketsBySection[section].numberOfListings++;\n                        }\n                    } catch (err) {\n                        console.log(`Error processing listing ${index}:`, err);\n                    }\n                });\n                Object.values(ticketsBySection).forEach((section)=>{\n                    if (section.lowestPrice === Infinity) section.lowestPrice = null;\n                    if (section.highestPrice === -Infinity) section.highestPrice = null;\n                    section.tickets.sort((a, b)=>(a.rawPrice || Infinity) - (b.rawPrice || Infinity));\n                });\n                return {\n                    totalSections: Object.keys(ticketsBySection).length,\n                    sections: Object.values(ticketsBySection)\n                };\n            });\n            console.log(`Found tickets in ${tickets.totalSections} sections`);\n            return tickets;\n        } catch (error) {\n            console.error(\"Error fetching ticket prices:\", error);\n            if (page) {\n                await page.screenshot({\n                    path: \"error-state.png\",\n                    fullPage: true\n                });\n                const content = await page.content();\n                console.log(\"Page content at error:\", content.substring(0, 500) + \"...\");\n            }\n            return {\n                totalSections: 0,\n                sections: []\n            };\n        } finally{\n            if (browser && !existingPage) {\n                await browser.close();\n            }\n        }\n    }\n    async searchConcerts(artist, venue, location) {\n        const browser = await this.setupBrowser();\n        let searchPage;\n        let eventPage;\n        try {\n            searchPage = await this.setupPage(browser);\n            const searchUrl = this.generateSearchUrl(artist, venue, location);\n            console.log(\"Searching StubHub:\", searchUrl);\n            await searchPage.goto(searchUrl, {\n                waitUntil: \"networkidle0\",\n                timeout: 30000\n            });\n            console.log(\"Page loaded, checking content...\");\n            await searchPage.waitForTimeout(2000);\n            let content = await searchPage.content();\n            if (!content.includes('data-testid=\"primaryGrid\"')) {\n                console.log(\"Reloading page due to missing content...\");\n                await searchPage.reload({\n                    waitUntil: \"domcontentloaded\"\n                });\n                await searchPage.waitForTimeout(3000);\n            }\n            console.log(\"Waiting for primary grid...\");\n            await searchPage.waitForSelector('[data-testid=\"primaryGrid\"]');\n            console.log(\"Found primary grid, extracting events...\");\n            await searchPage.waitForTimeout(2000);\n            const events = await this.extractEventDetails(searchPage);\n            console.log(`\\nRaw events extracted: ${events.length}`);\n            const matchingEvents = events.filter((event)=>{\n                console.log(\"Checking event:\", event.name);\n                const titleMatch = !artist || event.name.toLowerCase().includes(artist.toLowerCase());\n                const venueMatch = !venue || event.venue.toLowerCase().includes(venue.toLowerCase());\n                const locationMatch = !location || event.location.toLowerCase().includes(location.toLowerCase());\n                console.log(\"Match results:\", {\n                    titleMatch,\n                    venueMatch,\n                    locationMatch\n                });\n                return titleMatch && venueMatch && locationMatch;\n            });\n            console.log(\"Found matching events:\", matchingEvents.length);\n            // Create a Set to track processed event URLs\n            const processedUrls = new Set();\n            const eventsWithTickets = [];\n            for (const event of matchingEvents){\n                // Skip if we've already processed this event URL\n                if (processedUrls.has(event.link)) {\n                    console.log(\"Skipping duplicate event URL:\", event.link);\n                    continue;\n                }\n                const { success, page: newPage } = await this.navigateToEvent(searchPage, event);\n                if (success && newPage) {\n                    eventPage = newPage;\n                    const tickets = await this.getTicketPrices(event.link, eventPage);\n                    console.log(\"Scraped Tickets:\", JSON.stringify(tickets, null, 2));\n                    eventsWithTickets.push({\n                        name: event.name,\n                        date: event.date,\n                        venue: event.venue,\n                        location: event.location,\n                        category: event.category,\n                        link: event.link,\n                        source: event.source,\n                        tickets: tickets\n                    });\n                    // Mark this URL as processed\n                    processedUrls.add(event.link);\n                    await eventPage.close();\n                    await searchPage.waitForTimeout(1000);\n                }\n            }\n            return eventsWithTickets;\n        } catch (error) {\n            console.error(\"Search error:\", error);\n            if (searchPage) {\n                await searchPage.screenshot({\n                    path: \"error.png\",\n                    fullPage: true\n                });\n            }\n            return [];\n        } finally{\n            if (eventPage && !eventPage.isClosed()) await eventPage.close();\n            if (searchPage && !searchPage.isClosed()) await searchPage.close();\n            if (browser) await browser.close();\n        }\n    }\n    // Updated extractEventDetails method\n    async extractEventDetails(page) {\n        console.log(\"Starting event extraction in Node\");\n        const results = await page.evaluate(()=>{\n            const results = {\n                logs: [],\n                events: []\n            };\n            const eventContainer = document.querySelector('[data-testid=\"primaryGrid\"]');\n            results.logs.push(`Found container: ${!!eventContainer}`);\n            if (!eventContainer) {\n                results.logs.push(\"No event container found\");\n                return results;\n            }\n            const listItems = Array.from(eventContainer.querySelectorAll(\"li\")).slice(1);\n            results.logs.push(`Processing ${listItems.length} event items`);\n            listItems.forEach((item, index)=>{\n                try {\n                    const link = item.querySelector(\"a\");\n                    const titleMatch = item.textContent.match(/(?:PM|AM)(.*?)(?:Byline|Shed|Theatre|Arena|Center|Complex|Bar|Bottle)/);\n                    const title = titleMatch?.[1]?.trim() || \"\";\n                    const timeElement = item.querySelector(\"time\");\n                    const dateText = timeElement?.textContent?.trim() || \"\";\n                    // Updated regex to handle year in the middle\n                    const dateMatch = dateText.match(/([A-Za-z]+)\\s+(\\d+)\\s+(\\d{4})([A-Za-z]+)(\\d+:\\d+\\s*[AP]M)/i);\n                    let formattedDate = null;\n                    if (dateMatch) {\n                        const [_, month, day, year, dayOfWeek, time] = dateMatch;\n                        const dateStr = `${month} ${day} ${year} ${time}`;\n                        formattedDate = dateStr;\n                        results.logs.push(`Parsed Date String: ${dateStr}`);\n                    } else {\n                        results.logs.push(`Failed to parse date from text: \"${dateText}\"`);\n                    }\n                    const venueMatch = item.textContent.match(/(?:at\\s)?((?:Byline|Shed|Theatre|Arena|Center|Complex|Bar|Bottle)[^,]+)/);\n                    const venue = venueMatch?.[1]?.trim() || \"\";\n                    const locationMatch = item.textContent.match(/([^,]+,\\s*[A-Z]{2})/);\n                    const location = locationMatch?.[1]?.trim() || \"\";\n                    // Set category\n                    const category = \"Concert\";\n                    if (title && formattedDate && venue && location && link?.href) {\n                        results.events.push({\n                            name: title,\n                            date: formattedDate,\n                            venue,\n                            location,\n                            category,\n                            link: link.href,\n                            source: \"stubhub\"\n                        });\n                        // Add debug logging for successful event\n                        results.logs.push(`Successfully parsed event: ${title} on ${formattedDate}`);\n                    } else {\n                        results.logs.push(`Incomplete data for event ${index + 1}, skipping insertion.`);\n                        results.logs.push(`Title: ${title}`);\n                        results.logs.push(`Date: ${formattedDate}`);\n                        results.logs.push(`Venue: ${venue}`);\n                        results.logs.push(`Location: ${location}`);\n                        results.logs.push(`Has link: ${!!link?.href}`);\n                    }\n                    // Debug logging\n                    results.logs.push(`\\nList Item ${index + 1}:`);\n                    results.logs.push(`Name: ${title}`);\n                    results.logs.push(`Date: ${formattedDate}`);\n                    results.logs.push(`Original Date Text: ${dateText}`);\n                    results.logs.push(`Venue: ${venue}`);\n                    results.logs.push(`Location: ${location}`);\n                    results.logs.push(`Category: ${category}`);\n                    results.logs.push(`Has link: ${!!link?.href}`);\n                } catch (err) {\n                    results.logs.push(`Error processing item ${index + 1}: ${err.message}`);\n                }\n            });\n            return results;\n        });\n        // Log debug information\n        results.logs.forEach((log)=>console.log(log));\n        return results.events;\n    }\n    // navigateToEvent remains unchanged\n    async navigateToEvent(page, event) {\n        try {\n            console.log(\"Attempting to navigate to event:\", event.name);\n            const containerSelector = '[data-testid=\"primaryGrid\"]';\n            await page.waitForSelector(containerSelector);\n            console.log(\"Found event container\");\n            // Get all event links\n            const eventLinks = await page.$$(`${containerSelector} a[href*=\"/event/\"]`);\n            console.log(\"Found event links:\", eventLinks.length);\n            for (const link of eventLinks){\n                const linkContent = await link.evaluate((el)=>{\n                    return {\n                        text: el.textContent.replace(/\\s+/g, \" \").trim(),\n                        href: el.href\n                    };\n                });\n                console.log(\"Checking link:\", linkContent);\n                if (linkContent.text.includes(event.name)) {\n                    console.log(\"Found matching event, clicking link\");\n                    // Create a promise that resolves when a new page is created\n                    const newPagePromise = new Promise((resolve)=>page.browser().once(\"targetcreated\", async (target)=>{\n                            const newPage = await target.page();\n                            resolve(newPage);\n                        }));\n                    // Click the link\n                    await link.click();\n                    // Wait for the new page to open\n                    const newPage = await newPagePromise;\n                    console.log(\"New page opened\");\n                    // Wait for the listings container in the new page\n                    await newPage.waitForSelector(\"#listings-container\", {\n                        timeout: 60000\n                    });\n                    console.log(\"Event page loaded\");\n                    // Return both success status and the new page\n                    return {\n                        success: true,\n                        page: newPage\n                    };\n                }\n            }\n            console.log(`Could not find event with name: ${event.name}`);\n            return {\n                success: false,\n                page: null\n            };\n        } catch (error) {\n            console.error(\"Navigation error:\", error);\n            return {\n                success: false,\n                page: null\n            };\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StubHubSearcher);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/stub-hub.js\n");

/***/ }),

/***/ "(api)/./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatPrice: () => (/* binding */ formatPrice),\n/* harmony export */   setupBrowser: () => (/* binding */ setupBrowser),\n/* harmony export */   setupPage: () => (/* binding */ setupPage)\n/* harmony export */ });\n/* harmony import */ var puppeteer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! puppeteer */ \"puppeteer\");\n/* harmony import */ var puppeteer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(puppeteer__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var puppeteer_extra_plugin_stealth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! puppeteer-extra-plugin-stealth */ \"puppeteer-extra-plugin-stealth\");\n/* harmony import */ var puppeteer_extra_plugin_stealth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(puppeteer_extra_plugin_stealth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var puppeteer_extra__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! puppeteer-extra */ \"puppeteer-extra\");\n/* harmony import */ var puppeteer_extra__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(puppeteer_extra__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst isDev = \"development\" === \"development\";\nconst isRender = process.env.RENDER === \"1\";\nconst isDebug = process.argv.includes(\"--debug\");\nasync function setupBrowser() {\n    try {\n        // Add stealth plugin to puppeteer\n        const puppeteerExtra = (0,puppeteer_extra__WEBPACK_IMPORTED_MODULE_2__.addExtra)((puppeteer__WEBPACK_IMPORTED_MODULE_0___default()));\n        puppeteerExtra.use(puppeteer_extra_plugin_stealth__WEBPACK_IMPORTED_MODULE_1___default()());\n        const launchOptions = {\n            headless: !isDebug,\n            args: [\n                \"--no-sandbox\",\n                \"--disable-setuid-sandbox\",\n                \"--disable-blink-features=AutomationControlled\",\n                \"--disable-features=IsolateOrigins,site-per-process\",\n                \"--disable-web-security\",\n                \"--disable-sync\",\n                \"--window-size=1920,1080\",\n                \"--disable-background-timer-throttling\",\n                \"--disable-backgrounding-occluded-windows\",\n                \"--disable-renderer-backgrounding\",\n                \"--disable-dev-shm-usage\",\n                \"--disable-accelerated-2d-canvas\",\n                \"--disable-gpu\"\n            ],\n            ignoreDefaultArgs: [\n                \"--enable-automation\"\n            ],\n            defaultViewport: {\n                width: 1920,\n                height: 1080\n            }\n        };\n        // Add production-specific options\n        if (!isDev || isRender) {\n            launchOptions.args.push(\"--hide-scrollbars\");\n            launchOptions.headless = true;\n        }\n        const browser = await puppeteerExtra.launch(launchOptions);\n        console.log(\"Browser launched successfully in\", isDebug ? \"visible\" : \"headless\", \"mode\");\n        return browser;\n    } catch (error) {\n        console.error(\"Error setting up browser:\", error);\n        console.error(\"Launch options:\", {\n            isDev,\n            isRender,\n            isDebug,\n            platform: process.platform\n        });\n        throw error;\n    }\n}\nasync function setupPage(browser) {\n    const page = await browser.newPage();\n    // Enhanced stealth settings\n    await page.evaluateOnNewDocument(()=>{\n        // Overwrite navigator properties\n        Object.defineProperties(navigator, {\n            webdriver: {\n                get: ()=>undefined\n            },\n            languages: {\n                get: ()=>[\n                        \"en-US\",\n                        \"en\"\n                    ]\n            },\n            plugins: {\n                get: ()=>[\n                        {\n                            0: {\n                                type: \"application/x-google-chrome-pdf\",\n                                suffixes: \"pdf\",\n                                description: \"Portable Document Format\",\n                                enabledPlugin: true\n                            },\n                            description: \"Portable Document Format\",\n                            filename: \"internal-pdf-viewer\",\n                            length: 1,\n                            name: \"Chrome PDF Plugin\"\n                        }\n                    ]\n            },\n            platform: {\n                get: ()=>\"Win32\"\n            },\n            vendor: {\n                get: ()=>\"Google Inc.\"\n            }\n        });\n        // Add missing chrome properties\n        window.chrome = {\n            app: {\n                isInstalled: false,\n                InstallState: {\n                    DISABLED: \"disabled\",\n                    INSTALLED: \"installed\",\n                    NOT_INSTALLED: \"not_installed\"\n                },\n                RunningState: {\n                    CANNOT_RUN: \"cannot_run\",\n                    READY_TO_RUN: \"ready_to_run\",\n                    RUNNING: \"running\"\n                }\n            },\n            runtime: {\n                PlatformOs: {\n                    MAC: \"mac\",\n                    WIN: \"win\",\n                    ANDROID: \"android\",\n                    CROS: \"cros\",\n                    LINUX: \"linux\",\n                    OPENBSD: \"openbsd\"\n                },\n                PlatformArch: {\n                    ARM: \"arm\",\n                    X86_32: \"x86-32\",\n                    X86_64: \"x86-64\"\n                },\n                RequestUpdateCheckStatus: {\n                    THROTTLED: \"throttled\",\n                    NO_UPDATE: \"no_update\",\n                    UPDATE_AVAILABLE: \"update_available\"\n                },\n                OnInstalledReason: {\n                    INSTALL: \"install\",\n                    UPDATE: \"update\",\n                    CHROME_UPDATE: \"chrome_update\",\n                    SHARED_MODULE_UPDATE: \"shared_module_update\"\n                },\n                OnRestartRequiredReason: {\n                    APP_UPDATE: \"app_update\",\n                    OS_UPDATE: \"os_update\",\n                    PERIODIC: \"periodic\"\n                }\n            }\n        };\n        // Modify permissions API\n        const originalQuery = window.navigator.permissions?.query;\n        window.navigator.permissions.query = (parameters)=>parameters.name === \"notifications\" ? Promise.resolve({\n                state: Notification.permission\n            }) : originalQuery(parameters);\n        // Add WebGL properties\n        const getParameter = WebGLRenderingContext.prototype.getParameter;\n        WebGLRenderingContext.prototype.getParameter = function(parameter) {\n            // Spoof renderer info\n            if (parameter === 37445) {\n                return \"Intel Inc.\";\n            }\n            if (parameter === 37446) {\n                return \"Intel Iris OpenGL Engine\";\n            }\n            return getParameter.apply(this, [\n                parameter\n            ]);\n        };\n    });\n    // Set convincing headers\n    await page.setExtraHTTPHeaders({\n        \"Accept-Language\": \"en-US,en;q=0.9\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8\",\n        \"Connection\": \"keep-alive\",\n        \"Upgrade-Insecure-Requests\": \"1\",\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n        \"sec-ch-ua\": '\"Not_A Brand\";v=\"8\", \"Chromium\";v=\"120\", \"Google Chrome\";v=\"120\"',\n        \"sec-ch-ua-mobile\": \"?0\",\n        \"sec-ch-ua-platform\": '\"Windows\"'\n    });\n    // Set viewport and user agent\n    await page.setViewport({\n        width: 1920,\n        height: 1080\n    });\n    await page.setUserAgent(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\");\n    // Add additional page configurations\n    await page.setDefaultNavigationTimeout(60000);\n    await page.setDefaultTimeout(30000);\n    return page;\n}\nfunction formatPrice(price) {\n    if (typeof price === \"string\") {\n        return parseFloat(price.replace(/[^0-9.]/g, \"\"));\n    }\n    return price;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/utils.js\n");

/***/ }),

/***/ "(api)/./src/vivid-seats.js":
/*!****************************!*\
  !*** ./src/vivid-seats.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _src_config_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/src/config/env */ \"(api)/./src/config/env.ts\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(api)/./src/utils.js\");\n/* harmony import */ var _barrel_optimize_names_parse_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=parse!=!date-fns */ \"(api)/__barrel_optimize__?names=parse!=!./node_modules/date-fns/index.js\");\n\n\n\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(_src_config_env__WEBPACK_IMPORTED_MODULE_1__.config.supabase.url, _src_config_env__WEBPACK_IMPORTED_MODULE_1__.config.supabase.serviceKey);\n// Function to check if an event exists\nasync function eventExists(name, date) {\n    const { data, error } = await supabase.from(\"events\").select(\"id\").eq(\"name\", name).eq(\"date\", date).single();\n    if (error && error.code !== \"PGRST116\") {\n        console.error(\"Error checking event existence:\", error);\n        return false;\n    }\n    return data ? true : false;\n}\n// Function to check if a link exists\nasync function linkExists(eventId, source) {\n    const { data, error } = await supabase.from(\"event_links\").select(\"id\").eq(\"event_id\", eventId).eq(\"source\", source).single();\n    if (error && error.code !== \"PGRST116\") {\n        console.error(\"Error checking link existence:\", error);\n        return false;\n    }\n    return data ? true : false;\n}\n// Function to insert an event\nasync function insertEvent(event) {\n    const parsedDate = (0,_barrel_optimize_names_parse_date_fns__WEBPACK_IMPORTED_MODULE_3__.parse)(event.date, \"MMM d yyyy h:mm a\", new Date());\n    console.log(`Parsed Date Object: ${parsedDate} | Timestamp: ${parsedDate.getTime()}`);\n    if (isNaN(parsedDate)) {\n        console.error(\"Invalid Date object:\", event.date);\n        return null;\n    }\n    // Check if the event already exists\n    const exists = await eventExists(event.title, parsedDate.toISOString());\n    if (exists) {\n        console.log(`Event \"${event.title}\" on ${parsedDate.toISOString()} already exists. Skipping insertion.`);\n        return null;\n    }\n    const eventData = {\n        name: event.title,\n        type: event.type || \"Concert\",\n        category: event.category || \"Unknown\",\n        date: parsedDate.toISOString(),\n        venue: event.venue\n    };\n    console.log(\"Attempting to insert event:\", eventData);\n    const { data, error } = await supabase.from(\"events\").insert([\n        eventData\n    ]).select(\"id\");\n    if (error) {\n        console.error(\"Error inserting event:\", error);\n        console.error(\"Error details:\", {\n            code: error.code,\n            message: error.message,\n            details: error.details,\n            hint: error.hint\n        });\n        return null;\n    }\n    console.log(\"Successfully inserted event:\", data[0].id);\n    return data[0].id;\n}\n// Function to insert event links\nasync function insertEventLink(eventId, source, url) {\n    // Check if the link already exists to prevent duplicates\n    const exists = await linkExists(eventId, source);\n    if (exists) {\n        console.log(`Event link from ${source} already exists for event ID ${eventId}. Skipping insertion.`);\n        return;\n    }\n    const linkData = {\n        event_id: eventId,\n        source: source,\n        url: url\n    };\n    const { data, error } = await supabase.from(\"event_links\").insert([\n        linkData\n    ]);\n    if (error) {\n        console.error(`Error inserting event link (${source}):`, error);\n    } else {\n        console.log(`Inserted event link (${source}):`, data[0].id);\n    }\n}\n// Function to insert tickets\nasync function insertTickets(eventId, tickets) {\n    const formattedTickets = tickets.sections.flatMap((section)=>section.tickets.map((ticket)=>({\n                event_id: eventId,\n                price: ticket.rawPrice,\n                type: section.category,\n                section: section.section,\n                row: ticket.row || null,\n                quantity: parseInt(ticket.quantity, 10) || 1,\n                source: \"vividseats\",\n                url: ticket.listingUrl,\n                raw_data: ticket\n            })));\n    const { data, error } = await supabase.from(\"tickets\").insert(formattedTickets);\n    if (error) {\n        console.error(\"Error inserting tickets:\", error);\n    } else {\n        console.log(\"Inserted tickets:\", data.length);\n    }\n}\nasync function mainSearch(artist, venue, location) {\n    const searcher = new VividSeatsSearcher();\n    const concertsWithPrices = await searcher.searchConcerts(artist, venue, location);\n    for (const concert of concertsWithPrices){\n        const eventId = await insertEvent(concert);\n        if (eventId) {\n            // Insert event links into event_links table\n            await insertEventLink(eventId, \"vividseats\", concert.link);\n            // Insert tickets into tickets table\n            if (concert.tickets) {\n                await insertTickets(eventId, concert.tickets);\n            }\n        }\n    }\n}\n// Call mainSearch with your parameters\n// mainSearch('Cake', 'Salt Shed', 'Chicago');\nclass VividSeatsSearcher {\n    constructor(){\n        this.baseUrl = \"https://www.vividseats.com/search\";\n    }\n    generateSearchUrl(artist, venue, location) {\n        const searchParams = new URLSearchParams();\n        let searchTerms = [];\n        if (artist) searchTerms.push(artist);\n        if (location) searchTerms.push(location);\n        searchParams.append(\"searchTerm\", searchTerms.join(\" \"));\n        return `${this.baseUrl}?${searchParams.toString()}`;\n    }\n    // ... existing methods including getTicketPrices and searchConcerts ...\n    async searchConcerts(artist, venue, location) {\n        const browser = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.setupBrowser)();\n        let searchPage;\n        try {\n            searchPage = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.setupPage)(browser);\n            const searchUrl = this.generateSearchUrl(artist, venue, location);\n            console.log(\"Searching VividSeats:\", searchUrl);\n            await searchPage.goto(searchUrl, {\n                waitUntil: \"networkidle0\",\n                timeout: 30000\n            });\n            // Wait for either productions list to appear\n            await searchPage.waitForSelector('[data-testid=\"productions-list\"]', {\n                timeout: 10000\n            });\n            const concerts = await searchPage.evaluate(({ artist, location, venue })=>{\n                // Get all production listings from both \"Upcoming Events\" and \"All Locations\" sections\n                const productionLists = Array.from(document.querySelectorAll('[data-testid=\"productions-list\"]'));\n                const allEvents = [];\n                productionLists.forEach((list)=>{\n                    // First, get all production listings\n                    const listings = Array.from(list.querySelectorAll('[data-testid^=\"production-listing-\"]'));\n                    console.log(`Found ${listings.length} listings`);\n                    listings.forEach((listing)=>{\n                        try {\n                            // Get the anchor element and check if it exists and has href\n                            const anchor = listing.querySelector(\"a\");\n                            if (!anchor || !anchor.href) {\n                                console.log(\"Skipping listing - no valid link found\");\n                                return;\n                            }\n                            // Skip parking listings\n                            if (anchor.href.toLowerCase().includes(\"parking\")) {\n                                console.log(\"Skipping parking listing\");\n                                return;\n                            }\n                            // Get date components with null checks\n                            const dateElement = listing.querySelector('[data-testid=\"date-time-left-element\"]');\n                            if (!dateElement) {\n                                console.log(\"Skipping listing - no date element found\");\n                                return;\n                            }\n                            const dayOfWeek = dateElement.querySelector(\".MuiTypography-overline\")?.textContent?.trim() || \"\";\n                            const date = dateElement.querySelector(\".MuiTypography-small-bold\")?.textContent?.trim() || \"\";\n                            const year = dateElement.querySelector(\".MuiTypography-small-bold:last-of-type\")?.textContent?.trim() || \"\";\n                            const time = dateElement.querySelector(\".MuiTypography-caption\")?.textContent?.trim() || \"\";\n                            // Get title with null check\n                            const titleElement = listing.querySelector(\".styles_titleTruncate__XiZ53\");\n                            if (!titleElement) {\n                                console.log(\"Skipping listing - no title element found\");\n                                return;\n                            }\n                            const title = titleElement.textContent.trim();\n                            // Find venue and location using the styles_labelContainer__ wildcard\n                            const labelContainer = listing.querySelector('[class^=\"styles_labelContainer__\"]');\n                            if (!labelContainer) {\n                                console.log(\"Skipping listing - no label container found\");\n                                return;\n                            }\n                            // Get all text truncate spans within the label container\n                            const truncateSpans = Array.from(labelContainer.querySelectorAll(\".styles_textTruncate__wsM3Q\"));\n                            if (truncateSpans.length < 2) {\n                                console.log(\"Skipping listing - incomplete venue/location info\");\n                                return;\n                            }\n                            // First span is venue, last span is location\n                            const venue = truncateSpans[0].textContent.trim();\n                            const eventLocation = truncateSpans[truncateSpans.length - 1].textContent.trim();\n                            // Only add event if we have all required fields\n                            if (title && date && venue && eventLocation && anchor.href) {\n                                console.log(`Found valid event: ${title} at ${venue}`);\n                                allEvents.push({\n                                    title,\n                                    date: `${date} ${dayOfWeek} ${time}`,\n                                    venue,\n                                    location: eventLocation,\n                                    link: anchor.href,\n                                    source: \"vividseats\",\n                                    rawData: {\n                                        dayOfWeek,\n                                        date,\n                                        year,\n                                        time,\n                                        fullTitle: title\n                                    }\n                                });\n                            }\n                        } catch (err) {\n                            console.log(\"Error parsing event:\", err);\n                        }\n                    });\n                });\n                // Score and sort events by relevance\n                return allEvents.map((event)=>{\n                    let score = 0;\n                    // Exact title match\n                    if (event.title.toLowerCase() === artist.toLowerCase()) score += 100;\n                    else if (event.title.toLowerCase().includes(artist.toLowerCase())) score += 50;\n                    // Location match\n                    if (event.location.toLowerCase().includes(location.toLowerCase())) score += 30;\n                    // Venue match (if provided)\n                    if (venue && event.venue.toLowerCase().includes(venue.toLowerCase())) score += 20;\n                    return {\n                        ...event,\n                        matchScore: score\n                    };\n                }).sort((a, b)=>b.matchScore - a.matchScore);\n            }, {\n                artist,\n                location,\n                venue\n            });\n            console.log(`Found ${concerts.length} matching VividSeats event(s)`);\n            // Get tickets for the best matching event(s)\n            const bestMatches = concerts.filter((event)=>event.matchScore >= 50);\n            const concertsWithPrices = [];\n            // Process each event only once\n            const processedUrls = new Set();\n            for (const concert of bestMatches){\n                // Skip if we've already processed this URL\n                if (processedUrls.has(concert.link)) {\n                    continue;\n                }\n                console.log(`Processing event: \"${concert.title}\" (match score: ${concert.matchScore})`);\n                // Use the existing page to navigate to the event\n                await searchPage.goto(concert.link, {\n                    waitUntil: \"networkidle0\",\n                    timeout: 30000\n                });\n                // Extract tickets directly from the loaded page\n                const tickets = await searchPage.evaluate(()=>{\n                    const groupListings = Array.from(document.querySelectorAll('[data-testid=\"listing-group-row-container\"]'));\n                    const individualListings = Array.from(document.querySelectorAll('[data-testid=\"listing-row-container\"]'));\n                    console.log(`Found ${groupListings.length} group listings and ${individualListings.length} individual listings`);\n                    const allListings = [\n                        ...groupListings,\n                        ...individualListings\n                    ];\n                    const normalizeSection = (section)=>{\n                        if (!section) return \"UNKNOWN\";\n                        const sectionUpper = section.toUpperCase();\n                        const categories = {\n                            \"GENERAL ADMISSION\": [\n                                \"GA\",\n                                \"GEN\",\n                                \"GENADM\"\n                            ],\n                            \"GRANDSTAND\": [\n                                \"GRAND\",\n                                \"GSADA\",\n                                \"GS\"\n                            ],\n                            \"PREMIUM\": [\n                                \"PREM\",\n                                \"PRM\"\n                            ],\n                            \"VIP\": [\n                                \"VIP\"\n                            ],\n                            \"BALCONY\": [\n                                \"BAL\",\n                                \"BALC\"\n                            ],\n                            \"FLOOR\": [\n                                \"FLR\",\n                                \"FLOOR\"\n                            ],\n                            \"STANDING\": [\n                                \"STAND\"\n                            ]\n                        };\n                        for (const [category, keywords] of Object.entries(categories)){\n                            if (keywords.some((keyword)=>sectionUpper.includes(keyword))) {\n                                return category;\n                            }\n                        }\n                        return `UNCATEGORIZED: ${section}`;\n                    };\n                    const ticketsBySection = {};\n                    allListings.forEach((listing, index)=>{\n                        try {\n                            const section = listing.querySelector('[data-testid^=\"GRANDS\"], [data-testid^=\"GSADA\"], [data-testid^=\"PREM\"], [data-testid^=\"GENADM\"], .MuiTypography-small-medium')?.textContent?.trim() || \"\";\n                            const quantity = listing.querySelector(\".MuiTypography-caption-regular\")?.textContent?.trim() || \"\";\n                            const price = listing.querySelector('[data-testid=\"listing-price\"]')?.textContent?.trim() || \"\";\n                            const row = listing.querySelector('[data-testid=\"row\"]')?.textContent?.trim();\n                            const dealScore = listing.querySelector('[data-testid=\"deal-score\"], .styles_greatestScoreLabel__Kq4O3')?.textContent?.trim() || \"\";\n                            const listingId = listing.getAttribute(\"data-listing-id\");\n                            const normalizedSection = normalizeSection(section);\n                            if (!ticketsBySection[normalizedSection]) {\n                                ticketsBySection[normalizedSection] = {\n                                    section: normalizedSection,\n                                    originalSection: section,\n                                    category: normalizedSection.startsWith(\"UNCATEGORIZED\") ? \"UNKNOWN\" : normalizedSection,\n                                    tickets: []\n                                };\n                            }\n                            if (price && section) {\n                                ticketsBySection[normalizedSection].tickets.push({\n                                    quantity,\n                                    price,\n                                    dealScore,\n                                    rawPrice: parseFloat(price.replace(/[^0-9.]/g, \"\")),\n                                    row: row || null,\n                                    listingId,\n                                    originalSection: section,\n                                    listingUrl: window.location.href\n                                });\n                            }\n                        } catch (err) {\n                            console.log(`Error processing listing ${index + 1}:`, err);\n                        }\n                    });\n                    Object.values(ticketsBySection).forEach((section)=>{\n                        section.tickets.sort((a, b)=>a.rawPrice - b.rawPrice);\n                        section.lowestPrice = section.tickets[0]?.rawPrice || null;\n                        section.highestPrice = section.tickets[section.tickets.length - 1]?.rawPrice || null;\n                        section.numberOfListings = section.tickets.length;\n                    });\n                    return {\n                        totalSections: Object.keys(ticketsBySection).length,\n                        sections: Object.values(ticketsBySection).sort((a, b)=>a.lowestPrice - b.lowestPrice)\n                    };\n                });\n                if (tickets && tickets.totalSections > 0) {\n                    console.log(`Found tickets in ${tickets.totalSections} sections`);\n                    concertsWithPrices.push({\n                        ...concert,\n                        tickets\n                    });\n                }\n                // Mark this URL as processed\n                processedUrls.add(concert.link);\n            }\n            return concertsWithPrices;\n        } catch (error) {\n            console.error(\"VividSeats error details:\", error);\n            if (searchPage) {\n                await searchPage.screenshot({\n                    path: \"vividseats-error.png\",\n                    fullPage: true\n                });\n            }\n            return [];\n        } finally{\n            if (browser) {\n                await browser.close();\n            }\n        }\n    }\n    async getTicketPrices(eventUrl, existingPage = null) {\n        let browser = null;\n        let page = existingPage;\n        try {\n            if (!existingPage) {\n                browser = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.setupBrowser)();\n                page = await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.setupPage)(browser);\n                console.log(\"Navigating to event page:\", eventUrl);\n            }\n            // Function to check for content\n            const checkContent = async ()=>{\n                try {\n                    const content = await page.evaluate(()=>{\n                        const selectors = [\n                            \".styles_listingRowContainer__KNM4_\",\n                            \".styles_listingRowContainer__d8WLZ\",\n                            '[data-testid=\"listing-group-row-container\"]',\n                            '[data-testid=\"listing-row-container\"]'\n                        ];\n                        for (const selector of selectors){\n                            if (document.querySelector(selector)) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    });\n                    return content;\n                } catch (error) {\n                    console.log(\"Error checking content:\", error);\n                    return false;\n                }\n            };\n            // Initial navigation\n            try {\n                await page.goto(eventUrl, {\n                    waitUntil: \"domcontentloaded\",\n                    timeout: 30000\n                });\n                await page.waitForTimeout(2000);\n            } catch (error) {\n                console.log(\"Initial navigation error:\", error);\n            }\n            // Check for content\n            let contentFound = await checkContent();\n            let attempts = 1;\n            const maxAttempts = 3;\n            while(!contentFound && attempts < maxAttempts){\n                console.log(`Content check attempt ${attempts} of ${maxAttempts}`);\n                try {\n                    await page.reload({\n                        waitUntil: \"domcontentloaded\"\n                    });\n                    await page.waitForTimeout(2000);\n                    contentFound = await checkContent();\n                    if (contentFound) {\n                        console.log(\"Found content on attempt\", attempts);\n                        break;\n                    }\n                } catch (error) {\n                    console.log(`Error on attempt ${attempts}:`, error);\n                }\n                attempts++;\n            }\n            if (!contentFound) {\n                throw new Error(\"Could not find content after multiple attempts\");\n            }\n            // Extract tickets only if content was found\n            const tickets = await page.evaluate(()=>{\n                const groupListings = Array.from(document.querySelectorAll('[data-testid=\"listing-group-row-container\"]'));\n                const individualListings = Array.from(document.querySelectorAll('[data-testid=\"listing-row-container\"]'));\n                console.log(`Found ${groupListings.length} group listings and ${individualListings.length} individual listings`);\n                const allListings = [\n                    ...groupListings,\n                    ...individualListings\n                ];\n                const normalizeSection = (section)=>{\n                    if (!section) return \"UNKNOWN\";\n                    const sectionUpper = section.toUpperCase();\n                    const categories = {\n                        \"GENERAL ADMISSION\": [\n                            \"GA\",\n                            \"GEN\",\n                            \"GENADM\"\n                        ],\n                        \"GRANDSTAND\": [\n                            \"GRAND\",\n                            \"GSADA\",\n                            \"GS\"\n                        ],\n                        \"PREMIUM\": [\n                            \"PREM\",\n                            \"PRM\"\n                        ],\n                        \"VIP\": [\n                            \"VIP\"\n                        ],\n                        \"BALCONY\": [\n                            \"BAL\",\n                            \"BALC\"\n                        ],\n                        \"FLOOR\": [\n                            \"FLR\",\n                            \"FLOOR\"\n                        ],\n                        \"STANDING\": [\n                            \"STAND\"\n                        ]\n                    };\n                    for (const [category, keywords] of Object.entries(categories)){\n                        if (keywords.some((keyword)=>sectionUpper.includes(keyword))) {\n                            return category;\n                        }\n                    }\n                    return `UNCATEGORIZED: ${section}`;\n                };\n                const ticketsBySection = {};\n                allListings.forEach((listing, index)=>{\n                    try {\n                        const section = listing.querySelector('[data-testid^=\"GRANDS\"], [data-testid^=\"GSADA\"], [data-testid^=\"PREM\"], [data-testid^=\"GENADM\"], .MuiTypography-small-medium')?.textContent?.trim() || \"\";\n                        const quantity = listing.querySelector(\".MuiTypography-caption-regular\")?.textContent?.trim() || \"\";\n                        const price = listing.querySelector('[data-testid=\"listing-price\"]')?.textContent?.trim() || \"\";\n                        const row = listing.querySelector('[data-testid=\"row\"]')?.textContent?.trim();\n                        const dealScore = listing.querySelector('[data-testid=\"deal-score\"], .styles_greatestScoreLabel__Kq4O3')?.textContent?.trim() || \"\";\n                        const listingId = listing.getAttribute(\"data-listing-id\");\n                        const normalizedSection = normalizeSection(section);\n                        if (!ticketsBySection[normalizedSection]) {\n                            ticketsBySection[normalizedSection] = {\n                                section: normalizedSection,\n                                originalSection: section,\n                                category: normalizedSection.startsWith(\"UNCATEGORIZED\") ? \"UNKNOWN\" : normalizedSection,\n                                tickets: []\n                            };\n                        }\n                        if (price && section) {\n                            ticketsBySection[normalizedSection].tickets.push({\n                                quantity,\n                                price,\n                                dealScore,\n                                rawPrice: parseFloat(price.replace(/[^0-9.]/g, \"\")),\n                                row: row || null,\n                                listingId,\n                                originalSection: section,\n                                listingUrl: window.location.href\n                            });\n                        }\n                    } catch (err) {\n                        console.log(`Error processing listing ${index + 1}:`, err);\n                    }\n                });\n                Object.values(ticketsBySection).forEach((section)=>{\n                    section.tickets.sort((a, b)=>a.rawPrice - b.rawPrice);\n                    section.lowestPrice = section.tickets[0]?.rawPrice || null;\n                    section.highestPrice = section.tickets[section.tickets.length - 1]?.rawPrice || null;\n                    section.numberOfListings = section.tickets.length;\n                });\n                return {\n                    totalSections: Object.keys(ticketsBySection).length,\n                    sections: Object.values(ticketsBySection).sort((a, b)=>a.lowestPrice - b.lowestPrice)\n                };\n            });\n            console.log(`Found tickets in ${tickets.totalSections} sections`);\n            return tickets;\n        } catch (error) {\n            console.error(\"Error fetching ticket prices:\", error);\n            return {\n                totalSections: 0,\n                sections: []\n            };\n        } finally{\n            if (browser && !existingPage) {\n                try {\n                    await browser.close();\n                } catch (error) {\n                    console.log(\"Error closing browser:\", error);\n                }\n            }\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VividSeatsSearcher);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/vivid-seats.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/date-fns"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevents%2Fsearch&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cevents%5Csearch.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();